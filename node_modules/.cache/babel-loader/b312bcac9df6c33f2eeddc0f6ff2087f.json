{"ast":null,"code":"import { API_BASE_URL } from '../config';\nimport { normalizeResponseErrors } from './utils';\nimport { bindActionCreators } from 'redux'; ///////////Fetch Questions\n\nexport var FETCH_USERQUESTIONS_SUCCESS = 'FETCH_USERQUESTIONS_SUCCESS';\nexport var fetchUserQuestionsSuccess = function fetchUserQuestionsSuccess(question) {\n  return {\n    type: FETCH_USERQUESTIONS_SUCCESS,\n    question: question\n  };\n};\nexport var FETCH_USERQUESTION_ID_SUCCESS = 'FETCH_USERQUESTION_ID_SUCCESS';\nexport var fetchUserQuestionIDSuccess = function fetchUserQuestionIDSuccess(questionId) {\n  return {\n    type: FETCH_USERQUESTION_ID_SUCCESS,\n    questionId: questionId\n  };\n};\nexport var FETCH_USERQUESTIONS_ERROR = 'FETCH_USERQUESTIONS_ERROR';\nexport var fetchUserQuestionsError = function fetchUserQuestionsError(error) {\n  return {\n    type: FETCH_USERQUESTIONS_ERROR,\n    error: error\n  };\n};\nexport var SUBMIT_USERANSWER_SUCCESS = 'SUBMIT_USERANSWER_SUCCESS';\nexport var submitUserAnswerSuccess = function submitUserAnswerSuccess(guess) {\n  return {\n    type: SUBMIT_USERANSWER_SUCCESS,\n    guess: guess\n  };\n};\nexport var fetchUserQuestions = function fetchUserQuestions() {\n  return function (dispatch, getState) {\n    var authToken = getState().authReducer.authToken;\n    return fetch(\"\".concat(API_BASE_URL, \"/question\"), {\n      method: 'GET',\n      headers: {\n        Authorization: \"Bearer \".concat(authToken)\n      }\n    }).then(function (res) {\n      return normalizeResponseErrors(res);\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      dispatch(fetchUserQuestionsSuccess(res.question.questionText));\n      dispatch(fetchUserQuestionIDSuccess(res.question.questionId));\n    }).catch(function (err) {\n      dispatch(fetchUserQuestionsError(err));\n    });\n  };\n};\nexport var userGuess = function userGuess(guess, history) {\n  history.push('/backofcard');\n  return {\n    type: SUBMIT_USERANSWER_SUCCESS,\n    guess: guess\n  };\n};","map":{"version":3,"sources":["/Users/bradyfox/projects/thinkful/SQL-Labs-Mary-Brady-client/src/actions/frontofcardactions.js"],"names":["API_BASE_URL","normalizeResponseErrors","bindActionCreators","FETCH_USERQUESTIONS_SUCCESS","fetchUserQuestionsSuccess","question","type","FETCH_USERQUESTION_ID_SUCCESS","fetchUserQuestionIDSuccess","questionId","FETCH_USERQUESTIONS_ERROR","fetchUserQuestionsError","error","SUBMIT_USERANSWER_SUCCESS","submitUserAnswerSuccess","guess","fetchUserQuestions","dispatch","getState","authToken","authReducer","fetch","method","headers","Authorization","then","res","json","questionText","catch","err","userGuess","history","push"],"mappings":"AACA,SAASA,YAAT,QAA6B,WAA7B;AACA,SAASC,uBAAT,QAAwC,SAAxC;AACA,SAASC,kBAAT,QAAmC,OAAnC,C,CAIA;;AACA,OAAO,IAAMC,2BAA2B,GAAG,6BAApC;AACP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAC,QAAQ;AAAA,SAAK;AAClDC,IAAAA,IAAI,EAAEH,2BAD4C;AAElDE,IAAAA,QAAQ,EAARA;AAFkD,GAAL;AAAA,CAA1C;AAIP,OAAO,IAAME,6BAA6B,GAAG,+BAAtC;AACP,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAC,UAAU;AAAA,SAAK;AACrDH,IAAAA,IAAI,EAAEC,6BAD+C;AAErDE,IAAAA,UAAU,EAAVA;AAFqD,GAAL;AAAA,CAA7C;AAKP,OAAO,IAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,KAAK;AAAA,SAAK;AAC7CN,IAAAA,IAAI,EAAEI,yBADuC;AAE7CE,IAAAA,KAAK,EAALA;AAF6C,GAAL;AAAA,CAArC;AAIP,OAAO,IAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,KAAK;AAAA,SAAK;AAC7CT,IAAAA,IAAI,EAAEO,yBADuC;AAE7CE,IAAAA,KAAK,EAALA;AAF6C,GAAL;AAAA,CAArC;AAKP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAE5D,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,WAAX,CAAuBD,SAAzC;AACA,WAAOE,KAAK,WAAIrB,YAAJ,gBAA6B;AACrCsB,MAAAA,MAAM,EAAE,KAD6B;AAErCC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,mBAAYL,SAAZ;AADR;AAF4B,KAA7B,CAAL,CAMFM,IANE,CAMG,UAAAC,GAAG;AAAA,aAAIzB,uBAAuB,CAACyB,GAAD,CAA3B;AAAA,KANN,EAOFD,IAPE,CAOG,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAPN,EAQFF,IARE,CAQG,UAACC,GAAD,EAAS;AAEXT,MAAAA,QAAQ,CAACb,yBAAyB,CAACsB,GAAG,CAACrB,QAAJ,CAAauB,YAAd,CAA1B,CAAR;AACAX,MAAAA,QAAQ,CAACT,0BAA0B,CAACkB,GAAG,CAACrB,QAAJ,CAAaI,UAAd,CAA3B,CAAR;AACH,KAZE,EAaFoB,KAbE,CAaI,UAAAC,GAAG,EAAI;AACVb,MAAAA,QAAQ,CAACN,uBAAuB,CAACmB,GAAD,CAAxB,CAAR;AACH,KAfE,CAAP;AAgBH,GAnBiC;AAAA,CAA3B;AAqBP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAChB,KAAD,EAAQiB,OAAR,EAAoB;AACzCA,EAAAA,OAAO,CAACC,IAAR,CAAa,aAAb;AACA,SAAO;AACH3B,IAAAA,IAAI,EAAEO,yBADH;AAEHE,IAAAA,KAAK,EAALA;AAFG,GAAP;AAIH,CANM","sourcesContent":["\nimport { API_BASE_URL } from '../config';\nimport { normalizeResponseErrors } from './utils';\nimport { bindActionCreators } from 'redux';\n\n\n\n///////////Fetch Questions\nexport const FETCH_USERQUESTIONS_SUCCESS = 'FETCH_USERQUESTIONS_SUCCESS';\nexport const fetchUserQuestionsSuccess = question => ({\n    type: FETCH_USERQUESTIONS_SUCCESS,\n    question\n});\nexport const FETCH_USERQUESTION_ID_SUCCESS = 'FETCH_USERQUESTION_ID_SUCCESS';\nexport const fetchUserQuestionIDSuccess = questionId => ({\n    type: FETCH_USERQUESTION_ID_SUCCESS,\n    questionId\n});\n\nexport const FETCH_USERQUESTIONS_ERROR = 'FETCH_USERQUESTIONS_ERROR';\nexport const fetchUserQuestionsError = error => ({\n    type: FETCH_USERQUESTIONS_ERROR,\n    error\n});\nexport const SUBMIT_USERANSWER_SUCCESS = 'SUBMIT_USERANSWER_SUCCESS';\nexport const submitUserAnswerSuccess = guess => ({\n    type: SUBMIT_USERANSWER_SUCCESS,\n    guess\n})\n\nexport const fetchUserQuestions = () => (dispatch, getState) => {\n\n    const authToken = getState().authReducer.authToken;\n    return fetch(`${API_BASE_URL}/question`, {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${authToken}`\n        }\n    })\n        .then(res => normalizeResponseErrors(res))\n        .then(res => res.json())\n        .then((res) => {\n\n            dispatch(fetchUserQuestionsSuccess(res.question.questionText))\n            dispatch(fetchUserQuestionIDSuccess(res.question.questionId))\n        })\n        .catch(err => {\n            dispatch(fetchUserQuestionsError(err));\n        });\n};\n\nexport const userGuess = (guess, history) => {\n    history.push('/backofcard')\n    return {\n        type: SUBMIT_USERANSWER_SUCCESS,\n        guess\n    }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport thunk from 'redux-thunk';\nimport { loadAuthToken } from './local-storage';\nimport authReducer from './reducers/auth';\nimport protectedDataReducer from './reducers/protected-data';\nimport frontofcardReducer from './reducers/frontofcardreducer';\nimport backofcardReducer from './reducers/backofcardreducer';\nimport { setAuthToken, refreshAuthToken } from './actions/auth';\nimport logger from 'redux-logger';\nvar store = createStore(combineReducers({\n  form: formReducer,\n  authReducer: authReducer,\n  frontofcardReducer: frontofcardReducer,\n  backofcardReducer: backofcardReducer,\n  protectedData: protectedDataReducer\n}), applyMiddleware(thunk, logger)); // Hydrate the authToken from localStorage if it exist\n\nvar authToken = loadAuthToken();\n\nif (authToken) {\n  var token = authToken;\n  store.dispatch(setAuthToken(token));\n  store.dispatch(refreshAuthToken());\n}\n\nexport default store;","map":{"version":3,"sources":["/Users/bradyfox/projects/thinkful/SQL-Labs-Mary-Brady-client/src/store.js"],"names":["createStore","applyMiddleware","combineReducers","reducer","formReducer","thunk","loadAuthToken","authReducer","protectedDataReducer","frontofcardReducer","backofcardReducer","setAuthToken","refreshAuthToken","logger","store","form","protectedData","authToken","token","dispatch"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,gBAA/C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,IAAMC,KAAK,GAAGd,WAAW,CACvBE,eAAe,CAAC;AACda,EAAAA,IAAI,EAAEX,WADQ;AAEdG,EAAAA,WAAW,EAAEA,WAFC;AAGdE,EAAAA,kBAAkB,EAAEA,kBAHN;AAIdC,EAAAA,iBAAiB,EAAEA,iBAJL;AAKdM,EAAAA,aAAa,EAAER;AALD,CAAD,CADQ,EAQvBP,eAAe,CAACI,KAAD,EAAQQ,MAAR,CARQ,CAAzB,C,CAWA;;AACA,IAAMI,SAAS,GAAGX,aAAa,EAA/B;;AACA,IAAIW,SAAJ,EAAe;AACb,MAAMC,KAAK,GAAGD,SAAd;AACAH,EAAAA,KAAK,CAACK,QAAN,CAAeR,YAAY,CAACO,KAAD,CAA3B;AACAJ,EAAAA,KAAK,CAACK,QAAN,CAAeP,gBAAgB,EAA/B;AACD;;AAED,eAAeE,KAAf","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport thunk from 'redux-thunk';\nimport { loadAuthToken } from './local-storage';\nimport authReducer from './reducers/auth';\nimport protectedDataReducer from './reducers/protected-data';\nimport frontofcardReducer from './reducers/frontofcardreducer';\nimport backofcardReducer from './reducers/backofcardreducer';\nimport { setAuthToken, refreshAuthToken } from './actions/auth';\nimport logger from 'redux-logger';\n\nconst store = createStore(\n  combineReducers({\n    form: formReducer,\n    authReducer: authReducer,\n    frontofcardReducer: frontofcardReducer,\n    backofcardReducer: backofcardReducer,\n    protectedData: protectedDataReducer\n  }),\n  applyMiddleware(thunk, logger)\n);\n\n// Hydrate the authToken from localStorage if it exist\nconst authToken = loadAuthToken();\nif (authToken) {\n  const token = authToken;\n  store.dispatch(setAuthToken(token));\n  store.dispatch(refreshAuthToken());\n}\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport thunk from 'redux-thunk';\nimport { loadAuthToken } from './local-storage';\nimport authReducer from './reducers/auth';\nimport protectedDataReducer from './reducers/protected-data';\nimport frontofcardReducer from './reducers/frontofcardreducer';\nimport { setAuthToken, refreshAuthToken } from './actions/auth';\nvar store = createStore(combineReducers({\n  form: formReducer,\n  authReducer: authReducer,\n  frontofcardReducer: frontofcardReducer,\n  protectedData: protectedDataReducer\n}), applyMiddleware(thunk)); // Hydrate the authToken from localStorage if it exist\n\nvar authToken = loadAuthToken();\n\nif (authToken) {\n  var token = authToken;\n  store.dispatch(setAuthToken(token));\n  store.dispatch(refreshAuthToken());\n}\n\nexport default store;","map":{"version":3,"sources":["/Users/mkcnly/spacedrep/sql-labs-client/src/store.js"],"names":["createStore","applyMiddleware","combineReducers","reducer","formReducer","thunk","loadAuthToken","authReducer","protectedDataReducer","frontofcardReducer","setAuthToken","refreshAuthToken","store","form","protectedData","authToken","token","dispatch"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,SAAQC,OAAO,IAAIC,WAAnB,QAAqC,YAArC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,SAAQC,YAAR,EAAsBC,gBAAtB,QAA6C,gBAA7C;AAEA,IAAMC,KAAK,GAAGZ,WAAW,CACrBE,eAAe,CAAC;AACZW,EAAAA,IAAI,EAAET,WADM;AAEZG,EAAAA,WAAW,EAAEA,WAFD;AAGZE,EAAAA,kBAAkB,EAAEA,kBAHR;AAIZK,EAAAA,aAAa,EAAEN;AAJH,CAAD,CADM,EAOrBP,eAAe,CAACI,KAAD,CAPM,CAAzB,C,CAUA;;AACA,IAAMU,SAAS,GAAGT,aAAa,EAA/B;;AACA,IAAIS,SAAJ,EAAe;AACX,MAAMC,KAAK,GAAGD,SAAd;AACAH,EAAAA,KAAK,CAACK,QAAN,CAAeP,YAAY,CAACM,KAAD,CAA3B;AACAJ,EAAAA,KAAK,CAACK,QAAN,CAAeN,gBAAgB,EAA/B;AACH;;AAED,eAAeC,KAAf","sourcesContent":["import {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {reducer as formReducer} from 'redux-form';\nimport thunk from 'redux-thunk';\nimport {loadAuthToken} from './local-storage';\nimport authReducer from './reducers/auth';\nimport protectedDataReducer from './reducers/protected-data';\nimport frontofcardReducer from './reducers/frontofcardreducer';\nimport {setAuthToken, refreshAuthToken} from './actions/auth';\n\nconst store = createStore(\n    combineReducers({\n        form: formReducer,\n        authReducer: authReducer,\n        frontofcardReducer: frontofcardReducer,\n        protectedData: protectedDataReducer\n    }),\n    applyMiddleware(thunk)\n);\n\n// Hydrate the authToken from localStorage if it exist\nconst authToken = loadAuthToken();\nif (authToken) {\n    const token = authToken;\n    store.dispatch(setAuthToken(token));\n    store.dispatch(refreshAuthToken());\n}\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}
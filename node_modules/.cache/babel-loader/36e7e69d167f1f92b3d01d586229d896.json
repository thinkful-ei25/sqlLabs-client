{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"/Users/mkcnly/spacedrep/sql-labs-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mkcnly/spacedrep/sql-labs-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mkcnly/spacedrep/sql-labs-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mkcnly/spacedrep/sql-labs-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mkcnly/spacedrep/sql-labs-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mkcnly/spacedrep/sql-labs-client/src/components/frontofcard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport requiresLogin from './requires-login'; // TODO: import fetch after creating it.\n\nimport { userGuess, fetchUserQuestions } from '../actions/frontofcardactions';\nimport { makeGuess } from '../actions/backofcardactions';\nexport var FrontOfCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FrontOfCard, _React$Component);\n\n  function FrontOfCard() {\n    _classCallCheck(this, FrontOfCard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FrontOfCard).apply(this, arguments));\n  }\n\n  _createClass(FrontOfCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.dispatch(fetchUserQuestions());\n    }\n  }, {\n    key: \"guessSubmit\",\n    value: function guessSubmit() {\n      var guess = this.refs.userguess.value; //console.log the guess here\n\n      return this.props.dispatch(userGuess(guess, this.props.history));\n    }\n  }, {\n    key: \"createFrontCard\",\n    value: function createFrontCard() {\n      var _this = this;\n\n      // const {userAnswer, currentQuestion, numCorrect, numIncorrect} = this.props;\n      // const {correctAnswer } = this.props.currentQuestion.Answer;\n      // const \n      // if(userAnswer === correctAnswer) {\n      //here we will possiblly have a sort, or on the reducer, or on the route! but it will be \n      //showing us the question that's \"next\"\n      //create redux form that on submit\n      //dispatches the field input \n      //map through the question and display the fields from the question object\n      var currentQuestion = this.props.currentQuestion;\n      return React.createElement(\"div\", {\n        className: \"card with_shadow card_correct\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"arrow_box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"SQL Question\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, currentQuestion.userQuestion ? currentQuestion.userQuestion : 'Loading.......')), \"Your Guess: \", React.createElement(\"input\", {\n        type: \"text\",\n        ref: \"userguess\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.guessSubmit();\n        },\n        type: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Submit\")));\n    } //displays the card after loading\n\n  }, {\n    key: \"rerender\",\n    value: function rerender() {\n      return React.createElement(\"div\", {\n        className: \"x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.createFrontCard());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.loading) {\n        return React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        return this.rerender();\n      }\n    }\n  }]);\n\n  return FrontOfCard;\n}(React.Component); // user: test1\n// userquestions: [{question: 1 answer: 1 correct: 0 incorrect :0},\n// {question: 2 answer: 2 correct: 0 incorrect :0}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentQuestion: state.frontofcardReducer,\n    questionID: state.frontofcardReducer.userQuestionID\n  };\n};\n\nexport default withRouter(requiresLogin()(connect(mapStateToProps)(FrontOfCard)));","map":{"version":3,"sources":["/Users/mkcnly/spacedrep/sql-labs-client/src/components/frontofcard.js"],"names":["React","connect","withRouter","requiresLogin","userGuess","fetchUserQuestions","makeGuess","FrontOfCard","props","dispatch","guess","refs","userguess","value","history","currentQuestion","userQuestion","guessSubmit","createFrontCard","loading","rerender","Component","mapStateToProps","state","frontofcardReducer","questionID","userQuestionID"],"mappings":"AAAA;;;;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,kBAA1B,C,CACA;;AACA,SAAQC,SAAR,EAAmBC,kBAAnB,QAA4C,+BAA5C;AACA,SAAQC,SAAR,QAAwB,8BAAxB;AAGA,WAAaC,WAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,wCACwB;AAEhB,WAAKC,KAAL,CAAWC,QAAX,CAAoBJ,kBAAkB,EAAtC;AACH;AAJL;AAAA;AAAA,kCAKkB;AACV,UAAMK,KAAK,GAAG,KAAKC,IAAL,CAAUC,SAAV,CAAoBC,KAAlC,CADU,CAEV;;AACA,aAAO,KAAKL,KAAL,CAAWC,QAAX,CAAoBL,SAAS,CAACM,KAAD,EAAQ,KAAKF,KAAL,CAAWM,OAAnB,CAA7B,CAAP;AACH;AATL;AAAA;AAAA,sCAUsB;AAAA;;AACd;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA,UAAMC,eAAe,GAAG,KAAKP,KAAL,CAAWO,eAAnC;AAEA,aAEI;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,eAAe,CAACC,YAAhB,GAA6BD,eAAe,CAACC,YAA7C,GAA0D,gBAA9D,CAFJ,CADJ,kBAKgB;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALhB,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACC,WAAL,EAAN;AAAA,SAAjB;AAA2C,QAAA,IAAI,EAAC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CANJ,CAFJ;AAaO,KAtCf,CAwCY;;AAxCZ;AAAA;AAAA,+BAyCY;AACR,aAAO;AAAK,QAAA,SAAS,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoB,KAAKC,eAAL,EAApB,CAAP;AACa;AA3CjB;AAAA;AAAA,6BA6CW;AACP,UAAG,KAAKV,KAAL,CAAWW,OAAd,EAAsB;AACpB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACW,OAFb,MAEmB;AACjB,eAAO,KAAKC,QAAL,EAAP;AACS;AACF;AAnDb;;AAAA;AAAA,EAAiCpB,KAAK,CAACqB,SAAvC,E,CAsDU;AACV;AACA;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,SAAQ;AACUR,IAAAA,eAAe,EAAGQ,KAAK,CAACC,kBADlC;AAEUC,IAAAA,UAAU,EAAGF,KAAK,CAACC,kBAAN,CAAyBE;AAFhD,GAAR;AAIW,CALb;;AAOY,eAAexB,UAAU,CAACC,aAAa,GAAGF,OAAO,CAACqB,eAAD,CAAP,CAAyBf,WAAzB,CAAH,CAAd,CAAzB","sourcesContent":["'use strict';\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport requiresLogin from './requires-login';\n// TODO: import fetch after creating it.\nimport {userGuess, fetchUserQuestions} from '../actions/frontofcardactions'\nimport {makeGuess} from '../actions/backofcardactions'\n\n\nexport class FrontOfCard extends React.Component {\n    componentDidMount() {\n\n        this.props.dispatch(fetchUserQuestions());\n    }\n    guessSubmit() {\n        const guess = this.refs.userguess.value;\n        //console.log the guess here\n        return this.props.dispatch(userGuess(guess, this.props.history))\n    }\n    createFrontCard() {\n        // const {userAnswer, currentQuestion, numCorrect, numIncorrect} = this.props;\n        // const {correctAnswer } = this.props.currentQuestion.Answer;\n        // const \n        // if(userAnswer === correctAnswer) {\n\n        //here we will possiblly have a sort, or on the reducer, or on the route! but it will be \n        //showing us the question that's \"next\"\n\n        //create redux form that on submit\n        //dispatches the field input \n\n        //map through the question and display the fields from the question object\n        const currentQuestion = this.props.currentQuestion;\n\n        return (\n           \n            <div className=\"card with_shadow card_correct\">\n                <div className=\"arrow_box\">\n                    <h2>SQL Question</h2>\n                    <p>{currentQuestion.userQuestion?currentQuestion.userQuestion:'Loading.......'}</p>\n                </div>\n                Your Guess: <input type=\"text\" ref=\"userguess\"></input>\n                <div>\n                    <button onClick={() => this.guessSubmit()} type=\"input\">Submit</button>\n          </div>\n        </div>\n                )\n              }\n          \n            //displays the card after loading\n  rerender(){\n    return <div className=\"x\">{this.createFrontCard()}</div>\n                }\n              \n  render() {\n    if(this.props.loading){\n      return <h2>Loading...</h2>\n                } else {\n      return this.rerender();\n              }\n            }\n          }\n          \n          // user: test1\n// userquestions: [{question: 1 answer: 1 correct: 0 incorrect :0},\n// {question: 2 answer: 2 correct: 0 incorrect :0}\n                \nconst mapStateToProps = (state) => {\n  return ({\n                    currentQuestion : state.frontofcardReducer,\n                    questionID : state.frontofcardReducer.userQuestionID,\n              });\n            };\n            \n            export default withRouter(requiresLogin()(connect(mapStateToProps)(FrontOfCard)));"]},"metadata":{},"sourceType":"module"}